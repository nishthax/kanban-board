{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\kanban-board\\\\kanban-board\\\\src\\\\components\\\\KanbanBoard.js\";\nimport React from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KanbanBoard({\n  tickets,\n  selectedGroup,\n  selectedSort,\n  users\n}) {\n  // Grouping logic\n  const groupedTickets = tickets.reduce((groups, ticket) => {\n    const groupKey = selectedGroup === 'user' ? users.find(user => user.id === ticket.userId).name : ticket[selectedGroup];\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(ticket);\n    return groups;\n  }, {});\n\n  // Sorting logic for grouped tickets\n  const sortedGroups = Object.keys(groupedTickets).reduce((sorted, groupKey) => {\n    sorted[groupKey] = sortTickets(groupedTickets[groupKey], selectedSort);\n    return sorted;\n  }, {});\n\n  // Implement the sortTickets function\n  function sortTickets(ticketsToSort, sortKey) {\n    if (sortKey === 'priority') {\n      return ticketsToSort.slice().sort((a, b) => b.priority - a.priority);\n    } else if (sortKey === 'title') {\n      return ticketsToSort.slice().sort((a, b) => a.title.localeCompare(b.title));\n    }\n    // Handle other sorting options here\n    return ticketsToSort;\n    // Return the sorted array of tickets\n  }\n\n  const columnOrder = [\"backlog\", \"todo\", \"in progress\", \"done\", \"cancelled\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: columnOrder.map(progressStatus => {\n      var _groupedTickets$progr;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column\",\n        children: (_groupedTickets$progr = groupedTickets[progressStatus]) === null || _groupedTickets$progr === void 0 ? void 0 : _groupedTickets$progr.map(ticket => /*#__PURE__*/_jsxDEV(Card, {\n          ticket: ticket,\n          selectedSort: selectedSort\n        }, ticket.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this))\n      }, progressStatus, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n\n  // return (\n  //     <div className=\"kanban-board\">\n  //         {Object.keys(sortedGroups).map(groupKey => (\n  //             <div key={groupKey} className=\"column\">\n  //             <h2>{groupKey}</h2>\n  //             {sortedGroups[groupKey].map(ticket => (\n  //                 <Card key={ticket.id} ticket={ticket} />\n  //             ))}\n  //             </div>\n  //         ))}\n  //     </div>\n  // );\n}\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","Card","jsxDEV","_jsxDEV","KanbanBoard","tickets","selectedGroup","selectedSort","users","groupedTickets","reduce","groups","ticket","groupKey","find","user","id","userId","name","push","sortedGroups","Object","keys","sorted","sortTickets","ticketsToSort","sortKey","slice","sort","a","b","priority","title","localeCompare","columnOrder","className","children","map","progressStatus","_groupedTickets$progr","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/kanban-board/kanban-board/src/components/KanbanBoard.js"],"sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction KanbanBoard({ tickets, selectedGroup, selectedSort, users }) {\r\n  // Grouping logic\r\n  const groupedTickets = tickets.reduce((groups, ticket) => {\r\n    const groupKey = selectedGroup === 'user' ? users.find(user => user.id === ticket.userId).name : ticket[selectedGroup];\r\n    if (!groups[groupKey]) {\r\n      groups[groupKey] = [];\r\n    }\r\n    groups[groupKey].push(ticket);\r\n    return groups;\r\n  }, {});\r\n\r\n  // Sorting logic for grouped tickets\r\n  const sortedGroups = Object.keys(groupedTickets).reduce((sorted, groupKey) => {\r\n    sorted[groupKey] = sortTickets(groupedTickets[groupKey], selectedSort);\r\n    return sorted;\r\n  }, {});\r\n  \r\n    // Implement the sortTickets function\r\n    function sortTickets(ticketsToSort, sortKey) {\r\n        if (sortKey === 'priority') {\r\n            return ticketsToSort.slice().sort((a, b) => b.priority - a.priority);\r\n          } else if (sortKey === 'title') {\r\n            return ticketsToSort.slice().sort((a, b) => a.title.localeCompare(b.title));\r\n          }\r\n          // Handle other sorting options here\r\n          return ticketsToSort;\r\n          // Return the sorted array of tickets\r\n    }\r\n\r\n    const columnOrder = [\"backlog\", \"todo\", \"in progress\", \"done\", \"cancelled\"];\r\n\r\n  return (\r\n    <div className=\"column-container\">\r\n      {columnOrder.map(progressStatus => (\r\n        <div key={progressStatus} className=\"column\">\r\n          {groupedTickets[progressStatus]?.map(ticket => (\r\n            <Card key={ticket.id} ticket={ticket} selectedSort={selectedSort} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n    // return (\r\n    //     <div className=\"kanban-board\">\r\n    //         {Object.keys(sortedGroups).map(groupKey => (\r\n    //             <div key={groupKey} className=\"column\">\r\n    //             <h2>{groupKey}</h2>\r\n    //             {sortedGroups[groupKey].map(ticket => (\r\n    //                 <Card key={ticket.id} ticket={ticket} />\r\n    //             ))}\r\n    //             </div>\r\n    //         ))}\r\n    //     </div>\r\n    // );\r\n}\r\n\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}