{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\kanban-board\\\\kanban-board\\\\src\\\\components\\\\KanbanBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AddCardForm from './AddCardForm';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KanbanBoard({\n  tickets,\n  selectedGroup,\n  selectedSort,\n  onAddCard\n}) {\n  _s();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  // Grouping logic\n  const groupedTickets = tickets.reduce((groups, ticket) => {\n    const groupKey = selectedGroup === 'user' ? ticket.userId : ticket[selectedGroup]; // Status, user, or priority\n    if (!groups[groupKey]) {\n      groups[groupKey] = [];\n    }\n    groups[groupKey].push(ticket);\n    return groups;\n  }, {});\n\n  // Sorting logic for grouped tickets\n  const sortedGroups = Object.keys(groupedTickets).reduce((sorted, groupKey) => {\n    sorted[groupKey] = sortTickets(groupedTickets[groupKey], selectedSort);\n    return sorted;\n  }, {});\n\n  // Implement the sortTickets function\n  function sortTickets(ticketsToSort, sortKey) {\n    if (sortKey === 'priority') {\n      return ticketsToSort.slice().sort((a, b) => b.priority - a.priority);\n    } else if (sortKey === 'title') {\n      return ticketsToSort.slice().sort((a, b) => a.title.localeCompare(b.title));\n    }\n    // Handle other sorting options here\n    return ticketsToSort;\n    // Return the sorted array of tickets\n  }\n\n  return (\n    /*#__PURE__*/\n    // <div className=\"kanban-board\">\n    //     {Object.keys(sortedGroups).map(groupKey => (\n    //         <div key={groupKey} className=\"column\">\n    //         <h2>{groupKey}</h2>\n    //         {sortedGroups[groupKey].map(ticket => (\n    //             <Card key={ticket.id} ticket={ticket} />\n    //         ))}\n    //         </div>\n    //     ))}\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: Object.keys(sortedGroups).map(groupKey => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: groupKey\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-card-button\",\n          onClick: () => setIsFormOpen(true),\n          children: \"Add Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), isFormOpen && /*#__PURE__*/_jsxDEV(AddCardForm, {\n          onAddCard: newCard => {\n            onAddCard(groupKey, newCard);\n            setIsFormOpen(false);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards\",\n          children: sortedGroups[groupKey].map((ticket, index) => /*#__PURE__*/_jsxDEV(Card, {\n            index: index,\n            ticket: ticket\n          }, ticket.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, groupKey, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(KanbanBoard, \"asAwb8eD/fI3Oiy8QXktl+x26GQ=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","AddCardForm","Card","jsxDEV","_jsxDEV","KanbanBoard","tickets","selectedGroup","selectedSort","onAddCard","_s","isFormOpen","setIsFormOpen","groupedTickets","reduce","groups","ticket","groupKey","userId","push","sortedGroups","Object","keys","sorted","sortTickets","ticketsToSort","sortKey","slice","sort","a","b","priority","title","localeCompare","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","onClick","newCard","index","id","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/kanban-board/kanban-board/src/components/KanbanBoard.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport AddCardForm from './AddCardForm';\r\nimport Card from './Card';\r\n\r\nfunction KanbanBoard({ tickets, selectedGroup, selectedSort, onAddCard }) {\r\n    const [isFormOpen, setIsFormOpen] = useState(false);\r\n\r\n    // Grouping logic\r\n    const groupedTickets = tickets.reduce((groups, ticket) => {\r\n      const groupKey = selectedGroup === 'user' ? ticket.userId : ticket[selectedGroup]; // Status, user, or priority\r\n      if (!groups[groupKey]) {\r\n        groups[groupKey] = [];\r\n      }\r\n      groups[groupKey].push(ticket);\r\n      return groups;\r\n    }, {});\r\n  \r\n    // Sorting logic for grouped tickets\r\n    const sortedGroups = Object.keys(groupedTickets).reduce((sorted, groupKey) => {\r\n      sorted[groupKey] = sortTickets(groupedTickets[groupKey], selectedSort);\r\n      return sorted;\r\n    }, {});\r\n  \r\n    // Implement the sortTickets function\r\n    function sortTickets(ticketsToSort, sortKey) {\r\n        if (sortKey === 'priority') {\r\n            return ticketsToSort.slice().sort((a, b) => b.priority - a.priority);\r\n          } else if (sortKey === 'title') {\r\n            return ticketsToSort.slice().sort((a, b) => a.title.localeCompare(b.title));\r\n          }\r\n          // Handle other sorting options here\r\n          return ticketsToSort;\r\n          // Return the sorted array of tickets\r\n    }\r\n  \r\n    return (\r\n        // <div className=\"kanban-board\">\r\n        //     {Object.keys(sortedGroups).map(groupKey => (\r\n        //         <div key={groupKey} className=\"column\">\r\n        //         <h2>{groupKey}</h2>\r\n        //         {sortedGroups[groupKey].map(ticket => (\r\n        //             <Card key={ticket.id} ticket={ticket} />\r\n        //         ))}\r\n        //         </div>\r\n        //     ))}\r\n        // </div>\r\n        \r\n        <div className=\"kanban-board\">\r\n      {Object.keys(sortedGroups).map(groupKey => (\r\n        <div key={groupKey} className=\"group\">\r\n          <h2>{groupKey}</h2>\r\n          <button className=\"add-card-button\" onClick={() => setIsFormOpen(true)}>Add Card</button>\r\n          {isFormOpen && <AddCardForm onAddCard={newCard => { onAddCard(groupKey, newCard); setIsFormOpen(false); }} />}\r\n          <div className=\"cards\">\r\n            {sortedGroups[groupKey].map((ticket, index) => (\r\n              <Card key={ticket.id} index={index} ticket={ticket} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}