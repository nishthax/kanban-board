{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\kanban-board\\\\kanban-board\\\\src\\\\components\\\\KanbanBoard.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\n// import Card from './Card';\n\n// function KanbanBoard({ tickets, selectedGroup, selectedSort }) {\n//     // Grouping logic\n//     const groupedTickets = tickets.reduce((groups, ticket) => {\n//       const groupKey = selectedGroup === 'user' ? ticket.userId : ticket[selectedGroup]; // Status, user, or priority\n//       if (!groups[groupKey]) {\n//         groups[groupKey] = [];\n//       }\n//       groups[groupKey].push(ticket);\n//       return groups;\n//     }, {});\n\n//     // Sorting logic for grouped tickets\n//     const sortedGroups = Object.keys(groupedTickets).reduce((sorted, groupKey) => {\n//       sorted[groupKey] = sortTickets(groupedTickets[groupKey], selectedSort);\n//       return sorted;\n//     }, {});\n\n//     // Implement the sortTickets function\n//     function sortTickets(ticketsToSort, sortKey) {\n//         if (sortKey === 'priority') {\n//             return ticketsToSort.slice().sort((a, b) => b.priority - a.priority);\n//           } else if (sortKey === 'title') {\n//             return ticketsToSort.slice().sort((a, b) => a.title.localeCompare(b.title));\n//           }\n//           // Handle other sorting options here\n//           return ticketsToSort;\n//           // Return the sorted array of tickets\n//     }\n\n//     return (\n//         <div className=\"kanban-board\">\n//         {Object.keys(sortedGroups).map(groupKey => (\n//           <div key={groupKey} className=\"column\">\n//             <h2>{groupKey}</h2>\n//             <AddCardForm onAddCard={title => handleAddCard(groupKey, title)} />\n//             {sortedGroups[groupKey].map(ticket => (\n//               <Card key={ticket.id} ticket={ticket} />\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//     );\n// }\n\n// export default KanbanBoard;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Card from './Card';\nimport AddCardForm from './AddCardForm'; // Make sure to import the AddCardForm component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction KanbanBoard() {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState('status');\n  const [selectedSort, setSelectedSort] = useState('priority');\n  const [groupedTickets, setGroupedTickets] = useState({});\n  useEffect(() => {\n    // Fetch data from API and setTickets\n    // ...\n\n    // Implement grouping logic and setGroupedTickets\n    // ...\n    axios.get('https://api.quicksell.co/v1/internal/frontend-assignment').then(response => {\n      setTickets(response.data.tickets);\n      // Implement grouping logic here\n      const grouped = groupTickets(response.data.tickets, selectedGroup);\n      setGroupedTickets(grouped);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, [selectedGroup]);\n  const handleAddCard = (groupKey, newCard) => {\n    const updatedGroupedTickets = {\n      ...groupedTickets,\n      [groupKey]: [...groupedTickets[groupKey], newCard]\n    };\n    setGroupedTickets(updatedGroupedTickets);\n  };\n  const sortTickets = (ticketsToSort, sortKey) => {\n    return ticketsToSort.slice().sort((a, b) => {\n      if (sortKey === 'priority') {\n        return b.priority - a.priority;\n      } else if (sortKey === 'title') {\n        return a.title.localeCompare(b.title);\n      }\n      // Implement other sorting options if needed\n      return 0;\n    });\n  };\n  function groupTicketsByProperty(tickets, property) {\n    const grouped = {};\n    for (const ticket of tickets) {\n      const groupKey = ticket[property];\n      if (!grouped[groupKey]) {\n        grouped[groupKey] = [];\n      }\n      grouped[groupKey].push(ticket);\n    }\n    return grouped;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"kanban-board\",\n    children: Object.keys(groupedTickets).map(groupKey => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [groupKey, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAddCard(groupKey, {\n            id: 'new-id',\n            // Generate a new ID\n            title: '',\n            tags: [],\n            userId: '',\n            priority: '',\n            status: ''\n          }),\n          children: \"+ Add Card\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AddCardForm, {\n        onAddCard: newCard => handleAddCard(groupKey, newCard)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), sortTickets(groupedTickets[groupKey], selectedSort).map(ticket => /*#__PURE__*/_jsxDEV(Card, {\n        ticket: ticket\n      }, ticket.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this))]\n    }, groupKey, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(KanbanBoard, \"im+uU6MUfs8OTtQqM93Gk3R0cNg=\");\n_c = KanbanBoard;\nexport default KanbanBoard;\nvar _c;\n$RefreshReg$(_c, \"KanbanBoard\");","map":{"version":3,"names":["React","useState","useEffect","axios","Card","AddCardForm","jsxDEV","_jsxDEV","KanbanBoard","_s","tickets","setTickets","selectedGroup","setSelectedGroup","selectedSort","setSelectedSort","groupedTickets","setGroupedTickets","get","then","response","data","grouped","groupTickets","catch","error","console","handleAddCard","groupKey","newCard","updatedGroupedTickets","sortTickets","ticketsToSort","sortKey","slice","sort","a","b","priority","title","localeCompare","groupTicketsByProperty","property","ticket","push","className","children","Object","keys","map","onClick","id","tags","userId","status","fileName","_jsxFileName","lineNumber","columnNumber","onAddCard","_c","$RefreshReg$"],"sources":["C:/Users/HP/OneDrive/Desktop/kanban-board/kanban-board/src/components/KanbanBoard.js"],"sourcesContent":["// import React from 'react';\r\n// import Card from './Card';\r\n\r\n// function KanbanBoard({ tickets, selectedGroup, selectedSort }) {\r\n//     // Grouping logic\r\n//     const groupedTickets = tickets.reduce((groups, ticket) => {\r\n//       const groupKey = selectedGroup === 'user' ? ticket.userId : ticket[selectedGroup]; // Status, user, or priority\r\n//       if (!groups[groupKey]) {\r\n//         groups[groupKey] = [];\r\n//       }\r\n//       groups[groupKey].push(ticket);\r\n//       return groups;\r\n//     }, {});\r\n  \r\n//     // Sorting logic for grouped tickets\r\n//     const sortedGroups = Object.keys(groupedTickets).reduce((sorted, groupKey) => {\r\n//       sorted[groupKey] = sortTickets(groupedTickets[groupKey], selectedSort);\r\n//       return sorted;\r\n//     }, {});\r\n  \r\n//     // Implement the sortTickets function\r\n//     function sortTickets(ticketsToSort, sortKey) {\r\n//         if (sortKey === 'priority') {\r\n//             return ticketsToSort.slice().sort((a, b) => b.priority - a.priority);\r\n//           } else if (sortKey === 'title') {\r\n//             return ticketsToSort.slice().sort((a, b) => a.title.localeCompare(b.title));\r\n//           }\r\n//           // Handle other sorting options here\r\n//           return ticketsToSort;\r\n//           // Return the sorted array of tickets\r\n//     }\r\n  \r\n//     return (\r\n//         <div className=\"kanban-board\">\r\n//         {Object.keys(sortedGroups).map(groupKey => (\r\n//           <div key={groupKey} className=\"column\">\r\n//             <h2>{groupKey}</h2>\r\n//             <AddCardForm onAddCard={title => handleAddCard(groupKey, title)} />\r\n//             {sortedGroups[groupKey].map(ticket => (\r\n//               <Card key={ticket.id} ticket={ticket} />\r\n//             ))}\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     );\r\n// }\r\n\r\n\r\n// export default KanbanBoard;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Card from './Card';\r\nimport AddCardForm from './AddCardForm'; // Make sure to import the AddCardForm component\r\n\r\nfunction KanbanBoard() {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [selectedGroup, setSelectedGroup] = useState('status');\r\n  const [selectedSort, setSelectedSort] = useState('priority');\r\n  const [groupedTickets, setGroupedTickets] = useState({});\r\n\r\n  useEffect(() => {\r\n    // Fetch data from API and setTickets\r\n    // ...\r\n\r\n    // Implement grouping logic and setGroupedTickets\r\n    // ...\r\n    axios.get('https://api.quicksell.co/v1/internal/frontend-assignment')\r\n    .then(response => {\r\n      setTickets(response.data.tickets);\r\n      // Implement grouping logic here\r\n      const grouped = groupTickets(response.data.tickets, selectedGroup);\r\n      setGroupedTickets(grouped);\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching data:', error);\r\n    });\r\n\r\n}, [selectedGroup]);\r\n\r\n  const handleAddCard = (groupKey, newCard) => {\r\n    const updatedGroupedTickets = {\r\n      ...groupedTickets,\r\n      [groupKey]: [...groupedTickets[groupKey], newCard],\r\n    };\r\n    setGroupedTickets(updatedGroupedTickets);\r\n  };\r\n  const sortTickets = (ticketsToSort, sortKey) => {\r\n    return ticketsToSort.slice().sort((a, b) => {\r\n        if (sortKey === 'priority') {\r\n          return b.priority - a.priority;\r\n        } else if (sortKey === 'title') {\r\n          return a.title.localeCompare(b.title);\r\n        }\r\n        // Implement other sorting options if needed\r\n        return 0;\r\n      });\r\n  };\r\n\r\n  function groupTicketsByProperty(tickets, property) {\r\n    const grouped = {};\r\n    for (const ticket of tickets) {\r\n      const groupKey = ticket[property];\r\n      if (!grouped[groupKey]) {\r\n        grouped[groupKey] = [];\r\n      }\r\n      grouped[groupKey].push(ticket);\r\n    }\r\n    return grouped;\r\n  }  \r\n\r\n  return (\r\n    <div className=\"kanban-board\">\r\n      {Object.keys(groupedTickets).map(groupKey => (\r\n        <div key={groupKey} className=\"column\">\r\n          <h2>\r\n            {groupKey}\r\n            <button\r\n              onClick={() => handleAddCard(groupKey, {\r\n                id: 'new-id', // Generate a new ID\r\n                title: '',\r\n                tags: [],\r\n                userId: '',\r\n                priority: '',\r\n                status: '',\r\n              })}\r\n            >\r\n              + Add Card\r\n            </button>\r\n          </h2>\r\n          <AddCardForm onAddCard={newCard => handleAddCard(groupKey, newCard)} />\r\n          {sortTickets(groupedTickets[groupKey], selectedSort).map(ticket => (\r\n            <Card key={ticket.id} ticket={ticket} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default KanbanBoard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}